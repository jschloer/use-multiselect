{"version":3,"sources":["App.js","../../dist/index.es.js","index.js"],"names":["App","_useMultiSelect","_a","Object","react","allSelected","exceptions","_b","setSelectionState","setSelected","key","value","keyIndex","indexOf","concat","slice","toggleSelected","selectAll","deSelectAll","isSelected","includes","getAllSelectedKeys","keys","filterFunction","item","filter","getSelectionState","useMultiSelect","allSelectedKeys","names","state","react_default","a","createElement","style","display","onClick","ev","preventDefault","map","name","type","checked","onChange","target","JSON","stringify","ReactDOM","render","src_App","document","getElementById"],"mappings":"yJA+DeA,SA3DH,WAAM,IAAAC,ECFA,WAOlB,IAAAC,EAAWC,OAAAC,EAAA,SAAAD,CAAQ,CACnBE,aAAA,EACAC,WAAA,KAEAC,EAAAL,EAAA,GACAG,EAAAE,EAAAF,YACAC,EAAAC,EAAAD,WACAE,EAAAN,EAAA,GA0FA,OACAO,YAtFA,SAAAC,EAAAC,GAEA,IAAAC,EAAAN,EAAAO,QAAAH,GAGAL,IAAAM,IAAAN,GAAAM,EACAC,EAAA,GACAJ,EAAA,CACAH,cACAC,aAAAQ,OAAA,CAAAJ,MAMAE,GAAA,GACAJ,EAAA,CACAH,cACAC,aAAAS,MAAA,EAAAH,GAAAE,OAAAR,EAAAS,MAAAH,EAAA,OAqEAI,eA9DA,SAAAN,GAEA,IAAAE,EAAAN,EAAAO,QAAAH,GAGAF,EADAI,GAAA,EACA,CACAP,cACAC,aAAAS,MAAA,EAAAH,GAAAE,OAAAR,EAAAS,MAAAH,EAAA,KAGA,CACAP,cACAC,aAAAQ,OAAA,CAAAJ,OAmDAO,UA7CA,WACAT,EAAA,CACAH,aAAA,EACAC,WAAA,MA2CAY,YAtCA,WACAV,EAAA,CACAH,aAAA,EACAC,WAAA,MAoCAa,WA/BA,SAAAT,GACA,OAAAL,GACAC,EAAAc,SAAAV,GAEAJ,EAAAc,SAAAV,IA4BAW,mBAvBA,SAAAC,GACA,IAAAC,EAAAlB,EAAA,SAAAmB,GACA,OAAAlB,EAAAc,SAAAI,IACK,SAAAA,GACL,OAAAlB,EAAAc,SAAAI,IAEA,OAAAF,EAAAG,OAAAF,IAkBAG,kBAdA,WACA,OACArB,cACAC,gBD1FMqB,GANFN,EAFcpB,EAEdoB,mBACAF,EAHclB,EAGdkB,WACAV,EAJcR,EAIdQ,YACAQ,EALchB,EAKdgB,UACAC,EANcjB,EAMdiB,YACAQ,EAPczB,EAOdyB,kBAGEE,EAAkBP,EAAmBQ,GACrCC,EAAQJ,IAEZ,OACEK,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACrBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACEG,QAAS,SAAAC,GACPA,EAAGC,iBACHrB,MAHJ,cAQAc,EAAAC,EAAAC,cAAA,UACEG,QAAS,SAAAC,GACPA,EAAGC,iBACHpB,MAHJ,eAQCW,EAAMU,IAAI,SAAAC,GACT,OACET,EAAAC,EAAAC,cAAA,OAAKvB,IAAK8B,GACRT,EAAAC,EAAAC,cAAA,aACGO,EACDT,EAAAC,EAAAC,cAAA,SACEQ,KAAK,WACLD,KAAMA,EACNE,QAASvB,EAAWqB,GACpBG,SAAU,SAAAN,GAAE,OAAI5B,EAAY+B,EAAMH,EAAGO,OAAOF,kBAQ1DX,EAAAC,EAAAC,cAAA,WACGL,EAAgBW,IAAI,SAAA7B,GACnB,OAAOqB,EAAAC,EAAAC,cAAA,OAAKvB,IAAKA,GAAMA,MAG3BqB,EAAAC,EAAAC,cAAA,WAAMY,KAAKC,UAAUhB,OAKvBD,EAAQ,CACV,SACA,QACA,UACA,UACA,QACA,YACA,QACA,YACA,WACA,SACA,QACA,SACA,SACA,UACA,UACA,QACA,UACA,MACA,QACA,OACA,SACA,QACA,SACA,WACA,OACA,QACA,YACA,QACA,SEvFFkB,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d65ee337.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { useMultiSelect } from \"use-multiselect\";\n\nconst App = () => {\n  const {\n    getAllSelectedKeys,\n    isSelected,\n    setSelected,\n    selectAll,\n    deSelectAll,\n    getSelectionState\n  } = useMultiSelect();\n  // setup a small array of checkboxes\n  let allSelectedKeys = getAllSelectedKeys(names);\n  let state = getSelectionState();\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div>\n        <form>\n          <button\n            onClick={ev => {\n              ev.preventDefault();\n              selectAll();\n            }}\n          >\n            Select all\n          </button>\n          <button\n            onClick={ev => {\n              ev.preventDefault();\n              deSelectAll();\n            }}\n          >\n            Select none\n          </button>\n          {names.map(name => {\n            return (\n              <div key={name}>\n                <label>\n                  {name}\n                  <input\n                    type=\"checkbox\"\n                    name={name}\n                    checked={isSelected(name)}\n                    onChange={ev => setSelected(name, ev.target.checked)}\n                  />\n                </label>\n              </div>\n            );\n          })}\n        </form>\n      </div>\n      <div>\n        {allSelectedKeys.map(key => {\n          return <div key={key}>{key}</div>;\n        })}\n      </div>\n      <div>{JSON.stringify(state)}</div>\n    </div>\n  );\n};\nexport default App;\nlet names = [\n  \"Chance\",\n  \"Drusi\",\n  \"Nicolis\",\n  \"Lurlene\",\n  \"Tarra\",\n  \"Johnathon\",\n  \"Hanna\",\n  \"Valentina\",\n  \"Vittoria\",\n  \"Melany\",\n  \"Erena\",\n  \"Jayson\",\n  \"Stacee\",\n  \"Dominga\",\n  \"Broddie\",\n  \"Arden\",\n  \"Rolando\",\n  \"Den\",\n  \"Juana\",\n  \"Doti\",\n  \"Reagan\",\n  \"Georg\",\n  \"Monroe\",\n  \"Josefina\",\n  \"Joby\",\n  \"Timmi\",\n  \"Mehetabel\",\n  \"Danie\",\n  \"Sybyl\"\n];\n","import { useState } from 'react';\n\nvar useMultiSelect = function useMultiSelect() {\n  // we want to keep track of whether or not the current state is inclusive of everything or nothing\n  //    and then a list of exceptions to the rule.\n  // i.e. all items are selected, except for these five keys, or nothing is selected except these three keys\n  // so we need to keep track of:\n  //    the current state of selection\n  //    the list of exceptions\n  var _a = useState({\n    allSelected: false,\n    exceptions: []\n  }),\n      _b = _a[0],\n      allSelected = _b.allSelected,\n      exceptions = _b.exceptions,\n      setSelectionState = _a[1]; // now we want to return a set of functions for the consumer.\n  // We need a\n  //    function to set the value of a key\n\n\n  function setSelected(key, value) {\n    // logic is variable based on whether we're in allSelected or not.\n    var keyIndex = exceptions.indexOf(key); // if allSelected and value is false, make sure it's in the exceptions\n    // if !allSelected and value is true, make sure it's in the exceptions\n\n    if (allSelected && !value || !allSelected && value) {\n      if (keyIndex < 0) {\n        setSelectionState({\n          allSelected: allSelected,\n          exceptions: exceptions.concat([key])\n        });\n      }\n    } else {\n      // if allSelected and value is true, make sure it's not in exceptions\n      // if !allSelected and value is false, make sure it's not in exceptions\n      if (keyIndex >= 0) {\n        setSelectionState({\n          allSelected: allSelected,\n          exceptions: exceptions.slice(0, keyIndex).concat(exceptions.slice(keyIndex + 1))\n        });\n      }\n    }\n  } //    function to toggle the value of a key\n\n\n  function toggleSelected(key) {\n    // basically just check to see if is in the exceptions array, and invert that\n    var keyIndex = exceptions.indexOf(key);\n\n    if (keyIndex >= 0) {\n      setSelectionState({\n        allSelected: allSelected,\n        exceptions: exceptions.slice(0, keyIndex).concat(exceptions.slice(keyIndex + 1))\n      });\n    } else {\n      setSelectionState({\n        allSelected: allSelected,\n        exceptions: exceptions.concat([key])\n      });\n    }\n  } //    function for select all\n\n\n  function selectAll() {\n    setSelectionState({\n      allSelected: true,\n      exceptions: []\n    });\n  } //    function for deselect all\n\n\n  function deSelectAll() {\n    setSelectionState({\n      allSelected: false,\n      exceptions: []\n    });\n  } //    function to determine if a key is currently selected\n\n\n  function isSelected(key) {\n    if (allSelected) {\n      return !exceptions.includes(key);\n    } else {\n      return exceptions.includes(key);\n    }\n  } //    function to return all of the selected keys, given a list of keys\n\n\n  function getAllSelectedKeys(keys) {\n    var filterFunction = allSelected ? function (item) {\n      return !exceptions.includes(item);\n    } : function (item) {\n      return exceptions.includes(item);\n    };\n    return keys.filter(filterFunction);\n  } // would also be nice to have a way to return the actual definition for lazy loaders\n\n\n  function getSelectionState() {\n    return {\n      allSelected: allSelected,\n      exceptions: exceptions\n    };\n  }\n\n  return {\n    setSelected: setSelected,\n    toggleSelected: toggleSelected,\n    selectAll: selectAll,\n    deSelectAll: deSelectAll,\n    isSelected: isSelected,\n    getAllSelectedKeys: getAllSelectedKeys,\n    getSelectionState: getSelectionState\n  };\n};\n\nexport { useMultiSelect };","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}